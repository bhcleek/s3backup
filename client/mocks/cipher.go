// Code generated by MockGen. DO NOT EDIT.
// Source: cipher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCipher is a mock of Cipher interface.
type MockCipher struct {
	ctrl     *gomock.Controller
	recorder *MockCipherMockRecorder
}

// MockCipherMockRecorder is the mock recorder for MockCipher.
type MockCipherMockRecorder struct {
	mock *MockCipher
}

// NewMockCipher creates a new mock instance.
func NewMockCipher(ctrl *gomock.Controller) *MockCipher {
	mock := &MockCipher{ctrl: ctrl}
	mock.recorder = &MockCipherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCipher) EXPECT() *MockCipherMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCipher) Decrypt(cipherTextFile, plainTextFile string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", cipherTextFile, plainTextFile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCipherMockRecorder) Decrypt(cipherTextFile, plainTextFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCipher)(nil).Decrypt), cipherTextFile, plainTextFile)
}

// Encrypt mocks base method.
func (m *MockCipher) Encrypt(plainTextFile, cipherTextFile string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", plainTextFile, cipherTextFile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCipherMockRecorder) Encrypt(plainTextFile, cipherTextFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCipher)(nil).Encrypt), plainTextFile, cipherTextFile)
}
