// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package client

import (
	"sync"
)

// Ensure, that HashStub does implement Hash.
// If this is not the case, regenerate this file with moq.
var _ Hash = &HashStub{}

// HashStub is a mock implementation of Hash.
//
//	func TestSomethingThatUsesHash(t *testing.T) {
//
//		// make and configure a mocked Hash
//		mockedHash := &HashStub{
//			CalculateFunc: func(filePath string) (string, error) {
//				panic("mock out the Calculate method")
//			},
//			VerifyFunc: func(filePath string, expectedChecksum string) error {
//				panic("mock out the Verify method")
//			},
//		}
//
//		// use mockedHash in code that requires Hash
//		// and then make assertions.
//
//	}
type HashStub struct {
	// CalculateFunc mocks the Calculate method.
	CalculateFunc func(filePath string) (string, error)

	// VerifyFunc mocks the Verify method.
	VerifyFunc func(filePath string, expectedChecksum string) error

	// calls tracks calls to the methods.
	calls struct {
		// Calculate holds details about calls to the Calculate method.
		Calculate []struct {
			// FilePath is the filePath argument value.
			FilePath string
		}
		// Verify holds details about calls to the Verify method.
		Verify []struct {
			// FilePath is the filePath argument value.
			FilePath string
			// ExpectedChecksum is the expectedChecksum argument value.
			ExpectedChecksum string
		}
	}
	lockCalculate sync.RWMutex
	lockVerify    sync.RWMutex
}

// Calculate calls CalculateFunc.
func (mock *HashStub) Calculate(filePath string) (string, error) {
	if mock.CalculateFunc == nil {
		panic("HashStub.CalculateFunc: method is nil but Hash.Calculate was just called")
	}
	callInfo := struct {
		FilePath string
	}{
		FilePath: filePath,
	}
	mock.lockCalculate.Lock()
	mock.calls.Calculate = append(mock.calls.Calculate, callInfo)
	mock.lockCalculate.Unlock()
	return mock.CalculateFunc(filePath)
}

// CalculateCalls gets all the calls that were made to Calculate.
// Check the length with:
//
//	len(mockedHash.CalculateCalls())
func (mock *HashStub) CalculateCalls() []struct {
	FilePath string
} {
	var calls []struct {
		FilePath string
	}
	mock.lockCalculate.RLock()
	calls = mock.calls.Calculate
	mock.lockCalculate.RUnlock()
	return calls
}

// Verify calls VerifyFunc.
func (mock *HashStub) Verify(filePath string, expectedChecksum string) error {
	if mock.VerifyFunc == nil {
		panic("HashStub.VerifyFunc: method is nil but Hash.Verify was just called")
	}
	callInfo := struct {
		FilePath         string
		ExpectedChecksum string
	}{
		FilePath:         filePath,
		ExpectedChecksum: expectedChecksum,
	}
	mock.lockVerify.Lock()
	mock.calls.Verify = append(mock.calls.Verify, callInfo)
	mock.lockVerify.Unlock()
	return mock.VerifyFunc(filePath, expectedChecksum)
}

// VerifyCalls gets all the calls that were made to Verify.
// Check the length with:
//
//	len(mockedHash.VerifyCalls())
func (mock *HashStub) VerifyCalls() []struct {
	FilePath         string
	ExpectedChecksum string
} {
	var calls []struct {
		FilePath         string
		ExpectedChecksum string
	}
	mock.lockVerify.RLock()
	calls = mock.calls.Verify
	mock.lockVerify.RUnlock()
	return calls
}
