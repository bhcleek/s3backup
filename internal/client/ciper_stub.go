// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package client

import (
	"sync"
)

// Ensure, that CipherStub does implement Cipher.
// If this is not the case, regenerate this file with moq.
var _ Cipher = &CipherStub{}

// CipherStub is a mock implementation of Cipher.
//
//	func TestSomethingThatUsesCipher(t *testing.T) {
//
//		// make and configure a mocked Cipher
//		mockedCipher := &CipherStub{
//			DecryptFunc: func(cipherTextFile string, plainTextFile string) error {
//				panic("mock out the Decrypt method")
//			},
//			EncryptFunc: func(plainTextFile string, cipherTextFile string) error {
//				panic("mock out the Encrypt method")
//			},
//		}
//
//		// use mockedCipher in code that requires Cipher
//		// and then make assertions.
//
//	}
type CipherStub struct {
	// DecryptFunc mocks the Decrypt method.
	DecryptFunc func(cipherTextFile string, plainTextFile string) error

	// EncryptFunc mocks the Encrypt method.
	EncryptFunc func(plainTextFile string, cipherTextFile string) error

	// calls tracks calls to the methods.
	calls struct {
		// Decrypt holds details about calls to the Decrypt method.
		Decrypt []struct {
			// CipherTextFile is the cipherTextFile argument value.
			CipherTextFile string
			// PlainTextFile is the plainTextFile argument value.
			PlainTextFile string
		}
		// Encrypt holds details about calls to the Encrypt method.
		Encrypt []struct {
			// PlainTextFile is the plainTextFile argument value.
			PlainTextFile string
			// CipherTextFile is the cipherTextFile argument value.
			CipherTextFile string
		}
	}
	lockDecrypt sync.RWMutex
	lockEncrypt sync.RWMutex
}

// Decrypt calls DecryptFunc.
func (mock *CipherStub) Decrypt(cipherTextFile string, plainTextFile string) error {
	if mock.DecryptFunc == nil {
		panic("CipherStub.DecryptFunc: method is nil but Cipher.Decrypt was just called")
	}
	callInfo := struct {
		CipherTextFile string
		PlainTextFile  string
	}{
		CipherTextFile: cipherTextFile,
		PlainTextFile:  plainTextFile,
	}
	mock.lockDecrypt.Lock()
	mock.calls.Decrypt = append(mock.calls.Decrypt, callInfo)
	mock.lockDecrypt.Unlock()
	return mock.DecryptFunc(cipherTextFile, plainTextFile)
}

// DecryptCalls gets all the calls that were made to Decrypt.
// Check the length with:
//
//	len(mockedCipher.DecryptCalls())
func (mock *CipherStub) DecryptCalls() []struct {
	CipherTextFile string
	PlainTextFile  string
} {
	var calls []struct {
		CipherTextFile string
		PlainTextFile  string
	}
	mock.lockDecrypt.RLock()
	calls = mock.calls.Decrypt
	mock.lockDecrypt.RUnlock()
	return calls
}

// Encrypt calls EncryptFunc.
func (mock *CipherStub) Encrypt(plainTextFile string, cipherTextFile string) error {
	if mock.EncryptFunc == nil {
		panic("CipherStub.EncryptFunc: method is nil but Cipher.Encrypt was just called")
	}
	callInfo := struct {
		PlainTextFile  string
		CipherTextFile string
	}{
		PlainTextFile:  plainTextFile,
		CipherTextFile: cipherTextFile,
	}
	mock.lockEncrypt.Lock()
	mock.calls.Encrypt = append(mock.calls.Encrypt, callInfo)
	mock.lockEncrypt.Unlock()
	return mock.EncryptFunc(plainTextFile, cipherTextFile)
}

// EncryptCalls gets all the calls that were made to Encrypt.
// Check the length with:
//
//	len(mockedCipher.EncryptCalls())
func (mock *CipherStub) EncryptCalls() []struct {
	PlainTextFile  string
	CipherTextFile string
} {
	var calls []struct {
		PlainTextFile  string
		CipherTextFile string
	}
	mock.lockEncrypt.RLock()
	calls = mock.calls.Encrypt
	mock.lockEncrypt.RUnlock()
	return calls
}
